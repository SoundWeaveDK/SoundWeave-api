// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                     Int                      @id @default(autoincrement())
    username               String
    email                  String                   @unique
    password               String
    birthday               String
    createdAt              DateTime                 @default(now())
    profile_picture        String?
    followedBy             User[]                   @relation("Userfollows")
    following              User[]                   @relation("Userfollows")
    fk_gender_id           Gender                   @relation(fields: [genderId], references: [id])
    genderId               Int
    fk_country_id          Country                  @relation(fields: [countryId], references: [id])
    countryId              Int
    Watch_later            Watch_later[]
    Comment                Comment[]
    Podcast                Podcast[]
    Podcast_viewed_by_user Podcast_viewed_by_user[]
    Podcast_liked_by_user  Podcast_liked_by_user[]
    Comments_liked         Comments_liked[]
    analytics              analytics[]
}

model Podcast {
    id                     Int                      @id @default(autoincrement())
    podcast_name           String
    views                  Int                      @default(0)
    likes                  Int                      @default(0)
    money                  Float                    @default(0)
    description            String?
    podcast_file           String
    thumbnail              String
    Watch_later            Watch_later[]
    createdAt              DateTime                 @default(now())
    Comment                Comment[]
    fk_user_id             User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                 Int
    Podcast_viewed_by_user Podcast_viewed_by_user[]
    Podcast_liked_by_user  Podcast_liked_by_user[]
    analytics              analytics[]
}

model Gender {
    id          Int    @id @default(autoincrement())
    gender_name String
    User        User[]
}

model Country {
    id           Int    @id @default(autoincrement())
    country_name String
    User         User[]
}

model Podcast_viewed_by_user {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId     Int
}

model Podcast_liked_by_user {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId     Int
}

model Comment {
    id             Int              @id @default(autoincrement())
    comment        String
    fk_podcast_id  Podcast          @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId      Int
    fk_user_id     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         Int
    Comments_liked Comments_liked[]
}

model Comments_liked {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    fk_comment_id Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId     Int
}

model Watch_later {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId     Int
}

model analytics {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    fk_user_id    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        Int
    fk_podcast_id Podcast  @relation(fields: [podcastId], references: [id], onDelete: Cascade)
    podcastId     Int
}
