// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id                     Int                      @id @default(autoincrement())
    username               String
    email                  String                   @unique
    password               String
    birthday               String
    country                String
    gender                 String
    createdAt              DateTime                 @default(now())
    followedBy             User[]                   @relation("Userfollows")
    following              User[]                   @relation("Userfollows")
    fk_gender_id           Gender                   @relation(fields: [genderId], references: [id])
    genderId               Int
    fk_country_id          Country                  @relation(fields: [countryId], references: [id])
    countryId              Int
    fk_comment_id          Comment                  @relation(fields: [commentId], references: [id])
    commentId              Int
    Podcast_viewed_by_user Podcast_viewed_by_user[]
    Podcast_liked_by_user  Podcast_liked_by_user[]
    Comments_liked         Comments_liked[]
    Watch_later            Watch_later[]
}

model Podcast {
    id                     Int                      @id @default(autoincrement())
    podcast_name           String
    views                  BigInt
    likes                  BigInt
    money                  Float
    filename               String
    Podcast_viewed_by_user Podcast_viewed_by_user[]
    Podcast_liked_by_user  Podcast_liked_by_user[]
    fk_comment_id          Comment                  @relation(fields: [commentId], references: [id])
    commentId              Int
    Watch_later            Watch_later[]
    createdAt              DateTime                 @default(now())
}

model Gender {
    id          Int    @id @default(autoincrement())
    gender_name String
    User        User[]
}

model Country {
    id          Int    @id @default(autoincrement())
    contry_name String
    User        User[]
}

model Podcast_viewed_by_user {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id])
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id])
    podcastId     Int

    @@index([userId, podcastId])
}

model Podcast_liked_by_user {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id])
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id])
    podcastId     Int

    @@index([userId, podcastId])
}

model Comment {
    id                     Int              @id @default(autoincrement())
    comment                String
    commentId              Int?             @unique
    successor_comment_id   Comment?         @relation("CommentOwnerHistory", fields: [commentId], references: [id])
    predecessor_comment_id Comment?         @relation("CommentOwnerHistory")
    User                   User[]
    Podcast                Podcast[]
    Comments_liked         Comments_liked[]
}

model Comments_liked {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id])
    userId        Int
    fk_comment_id Comment @relation(fields: [commentId], references: [id])
    commentId     Int

    @@index([userId, commentId])
}

model Watch_later {
    id            Int     @id @default(autoincrement())
    fk_user_id    User    @relation(fields: [userId], references: [id])
    userId        Int
    fk_podcast_id Podcast @relation(fields: [podcastId], references: [id])
    podcastId     Int
}
